#!/usr/bin/env node

var path = require('path');
var cjson = require('cjson');
var Config = require('../lib/config');
var ActionsRegistry = require('../lib/actions');
var helpers = require('../lib/helpers');
var cliOptions = require('minimist')(process.argv.slice(2));
var configFileName = cliOptions.config || 'mup.json';
var settingsFileName = cliOptions.settings || 'settings.json';

require('colors');
require('../lib/update_notifier.js');

console.log('\nMeteor Up: Production Quality Meteor Deployments'.bold.blue);
console.log('------------------------------------------------'.bold.blue);

if (configFileName !== 'mup.json' || settingsFileName !== 'settings.json'){
  console.log('Using custom configuration/settings file'.bold.green);
}
console.log('Configuration file : ' + configFileName);
console.log('Settings file      : ' + settingsFileName);
console.log('');

var action = process.argv[2];
if(action == 'init') {
  //special setup for init
  ActionsRegistry.init();
} else {
  var cwd = path.resolve('.');
  //read config and validate it
  var config = Config.read(configFileName);

  // add settings file to configuration
  config.settings = settingsFileName;

  if(config._passwordExists) {
    //check for sshpass
    helpers.checkSshPassExists(function(exists) {
      if(exists) {
        runActions(config, cwd);
      } else {
        var errorMessage = "sshpass required for password based authentication: refer http://git.io/_vHbvQ";
        console.error(errorMessage.bold.red);
        process.exit(1);
      }
    });
  } else {
    runActions(config, cwd);
  }
}


function runActions(config, cwd, cliOptions) {
  var actionsRegistry = new ActionsRegistry(config, cwd, cliOptions);
  if(actionsRegistry[action]) {
    actionsRegistry[action]();
  } else {
    if(typeof action !== "undefined") {
      var errorMessage = 'No Such Action Exists: ' + action;
      console.error(errorMessage.bold.red);
    }
    helpers.printHelp();
  }
}
